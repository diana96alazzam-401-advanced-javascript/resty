{"version":3,"sources":["components/header/header.js","components/form/form.js","components/if/if.js","components/results/results.js","components/history/history-item.js","components/history/history.js","components/history/history-page.js","components/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","Form","props","handleSubmit","e","a","preventDefault","persist","state","url","method","progress","request","body","setState","headers","newObj","header","host","split","path","slice","join","fetch","raw","forEach","item","push","json","fetchedResults","handler","loading","id","Date","getTime","localStorageObj","localStorage","getItem","JSON","parse","setItem","stringify","renderHistory","console","log","target","value","alert","handleChangeURL","handleChangeBody","handleChangeMethod","onSubmit","this","name","type","onChange","className","prompt","onClick","React","Component","render","condition","children","If","Children","map","child","cloneElement","Then","Results","color","height","width","Object","keys","response","length","src","theme","HistoryItem","historyRecall","History","history","obj","historyItems","key","objKey","constructor","HistoryPage","historyList","Footer","App","formHandler","results","result","count","recalled","currentTarget","innerText","document","getElementById","setAttribute","bool","exact","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ddbe28bb.chunk.js","sourcesContent":["import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n\n\nimport './header.scss';\n\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>RESTy</h1>\n      <nav>\n        <ul>\n          <li><Link to=\"/\">Home</Link></li>\n          <li><NavLink to=\"/history\">History</NavLink></li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nimport './form.scss';\n\nclass Form extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      url: '',\n      method: '',\n      body: {},\n      request: {},\n    };\n  }\n\n  handleSubmit = async (e) => {\n    try {\n      e.preventDefault();\n      // persist the event to reset the form later\n      e.persist();\n\n\n      if (this.state.url && this.state.method) {\n\n        // start loading\n        this.props.progress(true);\n\n        let request = {\n          url: this.state.url,\n          method: this.state.method,\n          body: this.state.body,\n        };\n\n        // clear the form state url, method and body\n        let url = '';\n        let method = '';\n        let body = '';\n        this.setState({ request, url, method, body });\n\n        // array to push the headers in\n        let headers = [];\n\n        // create an object to be saved in the local storage \n        let newObj = {\n          body: this.state.body,\n          header: headers,\n          host: (this.state.url).split('/')[2],\n          method: this.state.method,\n          path: (this.state.url).split('/').slice(3).join('/'),\n          url: this.state.url,\n        };\n\n        // get and delete don't have body\n        if ((this.state.method === 'GET') || (this.state.method === 'DELETE')) {\n\n          const raw = await fetch(request.url);\n\n          // stop loading\n          this.props.progress(false);\n\n          // access headers\n          raw.headers.forEach(item => headers.push(item));\n          // read the response stream in the fetched body\n          const fetchedResults = await raw.json();\n          // pass the headers and the reselts in the props function to set the state of the app\n          this.props.handler(headers, fetchedResults, this.state.loading);\n\n          // create an id for the request\n          let id = new Date().getTime();\n          // get the history in the local storage \n          let localStorageObj = (localStorage.getItem('history')) ? JSON.parse(localStorage.getItem('history')) : {};\n          // append the fetched results to a properety in the local storage object with the key of the new item id\n          localStorageObj[id] = newObj;\n          // save the updated object in the local storage again\n          localStorage.setItem('history', JSON.stringify(localStorageObj));\n          // render the history \n          this.props.renderHistory(localStorageObj);\n\n        } else {\n\n          const raw = await fetch((this.state.url),\n            {\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n              },\n              method: this.state.method,\n              body: (this.state.body),\n            });\n\n          // stop loading\n          this.props.progress(false);\n\n          // access headers\n          raw.headers.forEach(item => headers.push(item));\n          // read the response stream in the fetched body\n          const fetchedResults = await raw.json();\n          // pass the headers and the reselts in the props function to set the state of the app\n          this.props.handler(headers, fetchedResults);\n\n          // create an id for the request\n          let id = new Date().getTime();\n          // get the history in the local storage \n          let localStorageObj = (localStorage.getItem('history')) ? JSON.parse(localStorage.getItem('history')) : {};\n          // append the fetched results to a properety in the local storage object with the key of the new item id\n          localStorageObj[id] = newObj;\n          // save the updated object in the local storage again\n          localStorage.setItem('history', JSON.stringify(localStorageObj));\n          // render the history \n          console.log(localStorageObj, 'what?');\n          this.props.renderHistory(localStorageObj);\n        }\n        // reset the form \n        e.target.url.value = '';\n        e.target.body.value = '';\n        e.target.method = '';\n      }\n\n      else {\n        alert('missing information');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  handleChangeURL = e => {\n    const url = e.target.value;\n    this.setState({ url });\n  };\n  handleChangeBody = e => {\n    const body = e.target.value;\n    if (body) {\n      this.setState({ body });\n    }\n  };\n\n  // it works this way but you need to click the history item two times\n  // componentWillReceiveProps = () => {\n  //   if ((this.props.historyRecall.url) && (this.props.historyRecall.method)) {\n  //     this.historyRecall();\n  //   }\n  // }\n\n  handleChangeMethod = e => {\n    const method = e.target.id;\n    this.setState({ method });\n  };\n\n  render() {\n    // check if there is history that has been clicked then call the function to fill the form\n    return (\n      <form id='form' onSubmit={this.handleSubmit}>\n        <label >\n          <span>URL: </span>\n          <input id='textInput' name='url' type='text' onChange={this.handleChangeURL} className={this.state.url ? this.state.url : ''} />\n          <span>Body: </span>\n          <input id='bodyTextInput' name='body' type='text' onChange={this.handleChangeBody} className={this.state.body ? this.state.body : ''} />\n          <button type=\"submit\">{this.props.prompt}</button>\n        </label>\n        <label className=\"methods\">\n          <span name='method' className={this.state.method === 'GET' ? 'active' : ''} id=\"GET\" onClick={this.handleChangeMethod}>GET</span>\n          <span name='method' className={this.state.method === 'POST' ? 'active' : ''} id=\"POST\" onClick={this.handleChangeMethod}>POST</span>\n          <span name='method' className={this.state.method === 'PUT' ? 'active' : ''} id=\"PUT\" onClick={this.handleChangeMethod}>PUT</span>\n          <span name='method' className={this.state.method === 'DELETE' ? 'active' : ''} id=\"DELETE\" onClick={this.handleChangeMethod}>DELETE</span>\n        </label>\n      </form>\n    );\n  }\n}\n\nexport default Form;","import React from 'react';\n\nconst render = (condition = false, children = null) => {\n  return condition ? children : null;\n};\nexport const If = (props) => {\n  return React.Children.map(props.children, (child) => {\n    return React.cloneElement(child, { condition: props.condition });\n  });\n};\n\nexport const Then = (props) => render(props.condition, props.children);\nexport const Else = (props) => render(!props.condition, props.children);\n","import React from 'react';\nimport ReactJson from 'react-json-view';\nimport Loader from 'react-loader-spinner';\nimport { If, Then } from '../if/if';\n\n\nimport './results.scss';\n\n\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n  }\n\n  render() {\n    // for the loader gif\n    if (!this.props.progress) {\n      return (\n        // show the results div only after the results are fetched \n        <If condition={Object.keys(this.props.response).length !== 0}>\n          <Then>\n            <div id=\"resultsDiv\">\n              <section className=\"results\">\n                <span>Headers</span>\n                <ReactJson id=\"headersID\" src={this.props.headers} theme=\"shapeshifter:inverted\" />\n                <span>Response</span>\n                <ReactJson id=\"responseID\" src={this.props.response} theme=\"shapeshifter:inverted\" />\n              </section>\n            </div>\n          </Then>\n        </If>\n      );\n    } else {\n      return <Loader type=\"ThreeDots\" color=\"#2BAD60\" height=\"100\" width=\"100\" />;\n    }\n  };\n}\n\nexport default Results;","import React from 'react';\n\nimport './history.scss';\n\nfunction HistoryItem(props) {\n  return (\n    <li className='history' onClick={props.historyRecall}>\n      <span>Method*{props.method}*URL*{props.url}*Body*{props.body}</span>\n    </li>\n  );\n}\n\nexport default HistoryItem;","import React from 'react';\n\nimport './history.scss';\nimport '../reset.scss';\nimport HistoryItem from './history-item.js';\n\n\n\nclass History extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {history:(props.history)} ? {history:(props.history)} : {};\n  }\n\n  componentWillMount() {\n    let history = JSON.parse(localStorage.getItem('history'));\n    this.setState({ history });\n  }\n\n  render() {\n\n    let obj = (this.state.history) ? (this.state.history) : {};\n    // create an array of the items in the local storage\n    let historyItems = Object.keys(obj).map(key => obj[key]);\n    \n    return (\n      <ul id='historyLog'>\n        {Object.keys(historyItems).map(objKey => {\n          // check if the body is empty and assign an empty string if so; other than that keep it the same\n          let body = (Object.keys(historyItems[objKey].body).length === 0 && obj.constructor === Object) ? '' : (historyItems[objKey].body);\n          \n          return <HistoryItem\n            key={objKey}\n            method={historyItems[objKey].method}\n            url={historyItems[objKey].url}\n            body={body}\n            historyRecall={this.props.historyRecall}\n          />;\n        })}\n      </ul>\n    );\n  }\n}\n\n\nexport default History;","import React from 'react';\n\nimport './history.scss';\nimport '../reset.scss';\n\n\n\nclass HistoryPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = (props.historyList) ? (props.historyList) : {};\n  }\n\n  componentDidMount() {\n    let history = JSON.parse(localStorage.getItem('history'));\n    this.setState({ history });\n  }\n  \n  render() {\n    let obj = (this.state.history) ? (this.state.history) : {};\n    // create an array of the items in the local storage\n    let historyItems = Object.keys(obj).map(key => {\n      obj[key].id= key;\n      return obj[key];\n    });\n    return (\n      <ul id='historyList'>\n        {Object.keys(historyItems).map(objKey => {\n          return (\n            <li className='history' key={objKey}>\n              <span>ID: {historyItems[objKey].id} </span>\n              <span>Method: {historyItems[objKey].method} </span>\n              <span>URL: {historyItems[objKey].url} </span>\n              <span>Body: {JSON.stringify(historyItems[objKey].body)} </span>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n\n}\n\n\nexport default HistoryPage;","import React from 'react';\nimport './footer.scss';\nconst Footer = ()=> {\n  return (\n    <footer>\n    &copy; 2020 Diana Alazzam \n    </footer>\n  );\n};\n\nexport default Footer;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport './App.scss';\n\n\nimport Header from './components/header/header';\nimport Form from './components/form/form';\nimport Results from './components/results/results';\nimport History from './components/history/history';\nimport HistoryPage from './components/history/history-page';\nimport Footer from './components/footer/footer';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { loading: false, count: 0, results: {}, history: {}, method: '', url: '', body: '' };\n  }\n\n  formHandler = (headers, results, loading) => {\n    const result = { headers, response: results };\n    this.setState({ loading, count: results.count, results: result });\n  }\n\n  renderHistory = (history) => {\n    this.setState({ history }, function () {\n      console.log('ppppppp', this.state);\n    });\n  }\n\n  historyRecall = (e) => {\n    let recalled = e.currentTarget.innerText;\n    recalled = recalled.split('*');\n    this.setState({\n      method: recalled[1],\n      url: recalled[3],\n      body: recalled[5],\n    }, function () {\n      console.log('sssssssssss', this.state);\n      // get the form elements and fill them with the recalled (clicked) history item\n      document.getElementById('textInput').setAttribute('value', recalled[3]);\n      document.getElementById('bodyTextInput').setAttribute('value', (recalled[5]) ? (recalled[5]) : '');\n    });\n    // this.setState({ history:{url: recalled[3], body: recalled[5]} });\n    console.log('heeey', recalled);\n\n  };\n\n  loading = (bool) => {\n    this.setState({ loading: bool });\n  }\n\n  render() {\n    return (\n      <>\n        <Header />\n        <main>\n          <Route exact path=\"/\">\n\n            <Form prompt='GO!'\n              handler={this.formHandler}\n              url={this.state.url}\n              method={this.state.method}\n              renderHistory={this.renderHistory}\n              progress={this.loading}\n            />\n\n            <Results\n              response={this.state.results}\n              headers={this.state.results.headers}\n              progress={this.state.loading}\n            />\n\n            <History\n              history={this.state.history}\n              historyRecall={this.historyRecall}\n              renderHistory={this.renderHistory}\n            />\n\n          </Route>\n\n          <Route exact path=\"/history\">\n            <HistoryPage historyList={this.state.history} />\n          </Route>\n\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}